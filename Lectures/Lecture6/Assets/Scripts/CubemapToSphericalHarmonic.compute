// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeHarmonics

#define PI            3.14159265359f
#define TWO_PI        6.28318530718f
#define FOUR_PI       12.56637061436f
#define INV_PI        0.31830988618f
#define INV_TWO_PI    0.15915494309f
#define INV_FOUR_PI   0.07957747155f
#define HALF_PI       1.57079632679f
#define INV_HALF_PI   0.636619772367f
#include <UnityCG.cginc>

RWStructuredBuffer<float4> SH_0_1_r;
RWStructuredBuffer<float4> SH_0_1_g;
RWStructuredBuffer<float4> SH_0_1_b;

RWStructuredBuffer<float4> SH_2_r;
RWStructuredBuffer<float4> SH_2_g;
RWStructuredBuffer<float4> SH_2_b;

RWStructuredBuffer<float4> SH_2_rgb;

TextureCube<half4> _Env;
SamplerState samplerLinearRepeat;

uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}

float3 SampleColor(float3 direction)
{   
    float4 tex = _Env.SampleLevel(samplerLinearRepeat, direction, 0);
    return tex.rgb;
}

float Sqr(float x)
{
    return x * x;
}

float Harmonic(float3 w, int l, int m)
{
    float sqrtPi = sqrt(UNITY_PI);
  
    if (l == 0)
    {
        return 1 / (2 * sqrtPi);
    }

    if (l == 1)
    {
        if (m == -1)
        {
            return -sqrt(3) * w.y / (2 * sqrtPi);
        }
        if (m == 0)
        {
            return sqrt(3) * w.z / (2 * sqrtPi);
        }
        if (m == 1)
        {
            return -sqrt(3) * w.x / (2 * sqrtPi);
        }
    }

    if (l == 2)
    {
        if (m == -2)
        {
            return sqrt(15) * w.y * w.x / (2 * sqrtPi);
        }
        if (m == -1)
        {
            return -sqrt(15) * w.y * w.z / (2 * sqrtPi);
        }
        if (m == 0)
        {
            return sqrt(5) * (3 * Sqr(w.z) - 1) / (4 * sqrtPi);
        }
        if (m == 1)
        {
            return -sqrt(15) * w.x * w.z / (2 * sqrtPi);
        }
        if (m == 2)
        {
            return sqrt(15) * (Sqr(w.x) - Sqr(w.y)) / (4 * sqrtPi);
        }
    }

    // Should not reach. Do we have throw/assert in shaders?
    return 0;
}

float HarmonicCoeff(int l, int m)
{
    if (l == 2)
    {
        if (m == 0)
        {
            return sqrt(5) / (4 * sqrt(UNITY_PI));
        }
        if (m == 2)
        {
            return sqrt(15) / (4 * sqrt(UNITY_PI));
        }
    }

    return Harmonic(float3(1, 1, 1), l, m);
}

[numthreads(1024, 1, 1)]
void ComputeHarmonics(uint id : SV_DispatchThreadID)
{
    const int THREADS = 1024;

    // My Unity crashes with more samples :(
    const int SAMPLES = 50;
    
    // See SH.shader for more details
    float4 myResults[7] = {
        float4(0, 0, 0, 0), // SH_0_1_r
        float4(0, 0, 0, 0), // SH_0_1_g
        float4(0, 0, 0, 0), // SH_0_1_b
        
        float4(0, 0, 0, 0), // SH_2_r
        float4(0, 0, 0, 0), // SH_2_g
        float4(0, 0, 0, 0), // SH_2_b
        
        float4(0, 0, 0, 0), // SH_2_rgb
    };

    float results[7][4] = {
        {0, 0, 0, 0}, // SH_0_1_r
        {0, 0, 0, 0}, // SH_0_1_g
        {0, 0, 0, 0}, // SH_0_1_b
        
        {0, 0, 0, 0}, // SH_2_r
        {0, 0, 0, 0}, // SH_2_g
        {0, 0, 0, 0}, // SH_2_b
        
        {0, 0, 0, 0}, // SH_2_rgb
    };
    
    float C[3] = {UNITY_PI, UNITY_TWO_PI / 3, UNITY_PI / 4};

    float3 samples[SAMPLES];
    float3 sampleColors[SAMPLES];
    for (int i = 0; i < SAMPLES; i++)
    {
        float cosTheta = Random((i + SAMPLES * id) * 2) * 2 - 1;
        float sinTheta = sqrt(1 - Sqr(cosTheta));
        float alpha = Random((i + SAMPLES * id) * 2 + 1) * 2 * UNITY_PI;
        samples[i] = float3(sinTheta * cos(alpha), sinTheta * sin(alpha), cosTheta);
        sampleColors[i] = SampleColor(samples[i]);
    }
    
    for (int c = 0; c < 3; c++)
    {
        for (int l = 0; l <= 2; l++)
        {
            for (int m = -l; m <= l; m++)
            {
                float result = 0;

                for (int i = 0; i < SAMPLES; i++)
                {
                    float3 w = samples[i];    
                    result += sampleColors[i][c] * Harmonic(w, l, m);
                }
                
                result *= 4.0f / SAMPLES;
                result *= C[l];
                result *= HarmonicCoeff(l, m);

                if (l == 0)
                {
                    results[c][3] = result;
                }
                if (l == 1)
                {
                    if (m == 1)
                    {
                        results[c][0] = result;
                    }
                    else
                    {
                        results[c][m + 2] = result;
                    }
                }
                if (l == 2)
                {
                    if (m == 2)
                    {
                        results[6][c] = result;
                    }
                    else
                    {
                        if (m == 0)
                        {
                            results[3 + c][3] = result * 2;
                        }
                        else
                        {
                            if (m == 1)
                            {
                                results[3 + c][2] = result;   
                            }
                            else
                            {
                                results[3 + c][m + 2] = result;
                            }
                        }
                    }
                }
            }
        }
    }

    for (int i = 0; i < 7; i++)
    {
        myResults[i].r = results[i][0];
        myResults[i].g = results[i][1];
        myResults[i].b = results[i][2];
        myResults[i].a = results[i][3];
    }
     
    SH_0_1_r[id] = myResults[0];
    SH_0_1_g[id] = myResults[1];
    SH_0_1_b[id] = myResults[2];
    
    SH_2_r[id] = myResults[3];
    SH_2_g[id] = myResults[4];
    SH_2_b[id] = myResults[5];    
    
    SH_2_rgb[id] = myResults[6];
}
